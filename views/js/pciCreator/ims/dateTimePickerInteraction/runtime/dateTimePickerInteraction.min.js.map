{"version":3,"mappings":"AACAA,MCDA,gEACA,6BADA,EAEA,sCACA,aAEAC,sCACAC,0CADA,CAGAC,WAHA,sBAGAC,GAHA,CAGAC,MAHA,CAGA,IAEAC,sBAFA,CAIAC,uBAJA,CAKAC,2CALA,CAMAD,yEANA,GAOAD,yDAPA,EAUA,0CACAG,+BAXA,CAYA,2CACAC,4BAbA,CAeAD,yBAfA,CAgBAL,qEAhBA,CAkBA,mEACAM,+CAnBA,CA6CAL,eAvBA,CAEAM,WAFA,uBAEA,OACAL,iBADA,CAIA,gCAJA,CAEA,WAGA,CAPA,CASAM,QATA,oBASA,OACAN,iBADA,CAIA,2CAJA,CAEA,sBAGA,CAdA,CAgBAO,WAhBA,uBAgBA,CACAH,MADA,EAEAA,kDAEA,CApBA,CAuBA,CACA,CAjDA,EAmDA,CAxDA,C,CA0DAV,MC1DA,iG","names":["define","qtiCustomInteractionContext","typeIdentifier","getInstance","dom","config","selectedDatetime","response","responseIdentifier","label","picker","getResponse","getState","oncompleted"],"sources":["../build/config-wrap-start-default.js","../../../taoTrainingPci/views/js/pciCreator/ims/dateTimePickerInteraction/runtime/dateTimePickerInteraction.js","../build/config-wrap-end-default.js"],"sourcesContent":["\n","define('dateTimePickerInteraction/runtime/dateTimePickerInteraction',[\n    'qtiCustomInteractionContext',\n], function (qtiCustomInteractionContext) {\n    'use strict';\n\n    qtiCustomInteractionContext.register({\n        typeIdentifier: 'dateTimePickerInteraction',\n\n        getInstance(dom, config, state) {\n\n            let selectedDatetime = null;\n\n            const response = config.boundTo;\n            const responseIdentifier = Object.keys(response)[0];\n            if (response && response[responseIdentifier] && response[responseIdentifier].base) {\n                selectedDatetime = response[responseIdentifier].base.string;\n            }\n\n            const label = document.createElement('label');\n            label.textContent = 'Pick a date';\n            const picker = document.createElement('input');\n            picker.type= 'datetime-local';\n\n            label.appendChild(picker);\n            dom.querySelector('.date-time-picker-interaction').appendChild(label);\n\n            const changeHandler = () => selectedDatetime = picker.value;\n            picker.addEventListener('change', changeHandler);\n\n\n            const myInteraction = {\n\n                getResponse() {\n                    if(!selectedDatetime) {\n                        return { base: null };\n                    }\n                    return { base : { string : selectedDatetime } };\n                },\n\n                getState() {\n                    if(!selectedDatetime) {\n                        return { response : { base : null } };\n                    }\n                    return { response : { base : { string : selectedDatetime } } };\n                },\n\n                oncompleted() {\n                    if(picker){\n                        picker.removeEventListener('change', changeHandler);\n                    }\n                }\n            };\n\n            config.onready(myInteraction);\n        }\n    });\n});\n\n","define(['dateTimePickerInteraction/runtime/dateTimePickerInteraction'],function(IMSPCI){return IMSPCI});\n"]}