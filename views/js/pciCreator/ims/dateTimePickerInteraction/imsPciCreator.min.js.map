{"version":3,"mappings":"AACAA,MCDA,6DACA,8CADA,CAEA,4DAFA,CAGA,mDAHA,EAIA,4CACA,aACA,sCACAC,QADA,CAEA,WACAC,kCACA,CAJA,CAKA,WACAA,qCACA,CAPA,EA+CA,MArCAC,gDACAC,gCADA,CAEAC,uBAFA,CAKA,+WAMAD,8BANA,wWAaAA,8BAbA,oBALA,CAyBAE,yCAzBA,CA4BAA,kDACAC,OADA,kBACAC,CADA,CACAC,KADA,CACA,CACAD,0BACA,CAHA,CAIAE,OAJA,kBAIAF,CAJA,CAIAC,KAJA,CAIA,CACAD,0BACA,CANA,EAQA,CACA,cACA,CAtDA,C,CAyDAR,MCzDA,2DACA,8CADA,CAEA,4EAFA,CAGA,0DAHA,EAIA,uCACA,aACA,8EACA,CAPA,C,CASAA,MCTA,oDACA,qEADA,CAEA,wDAFA,EAGA,wBACA,aAEA,mDAOA,MALAW,wDACA,2BADA,CAEAC,6BACA,CAEA,gCACA,CAdA,C,CAgBAZ,MChBA,gHACA,aAIA,OAMAa,iBANA,6BAMA,CACA,iCACA,CARA,CAgBAC,SAhBA,qBAgBA,CACA,aACA,CAlBA,CA0BAC,oBA1BA,gCA0BA,CACA,OACAR,UADA,CAEAG,UAFA,CAIA,CA/BA,CAuCAM,aAvCA,yBAuCA,EAvCA,CA8CAC,iBA9CA,6BA8CA,CACA,6EACA,CAhDA,CAuDAC,aAvDA,wBAuDAC,GAvDA,CAuDAC,WAvDA,CAuDA,CACA,kBACA,CAzDA,CA2DA,CAhEA,C,CAkEApB,MClEA,6E","names":["define","Question","console","stateQuestion","interaction","$form","formElement","minDate","i","value","maxDate","DateTimePickerInteractionWidget","Widget","getTypeIdentifier","getWidget","getDefaultProperties","afterCreatedt","getMarkupTemplate","getMarkupData","pci","defaultData"],"sources":["../build/config-wrap-start-default.js","../../../taoTrainingPci/views/js/pciCreator/ims/dateTimePickerInteraction/creator/widget/states/Question.js","../../../taoTrainingPci/views/js/pciCreator/ims/dateTimePickerInteraction/creator/widget/states/states.js","../../../taoTrainingPci/views/js/pciCreator/ims/dateTimePickerInteraction/creator/widget/Widget.js","../../../taoTrainingPci/views/js/pciCreator/ims/dateTimePickerInteraction/imsPciCreator.js","../build/config-wrap-end-default.js"],"sourcesContent":["\n","define('dateTimePickerInteraction/creator/widget/states/Question',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/states/Question',\n    'taoQtiItem/qtiCreator/widgets/helpers/formElement',\n], function(stateFactory, Question, formElement) {\n    'use strict';\n    var stateQuestion = stateFactory.extend(\n        Question,\n        function() {\n            console.log('init question state');\n        },\n        function() {\n            console.log('destroy question state');\n        }\n    );\n\n    stateQuestion.prototype.initForm = function() {\n        const interaction = this.widget.element;\n        const $form = this.widget.$form;\n\n        //render the form using the form template\n        this.widget.$form.html(\n            `\n<div class=\"panel\">\n    <label for=\"minDate\" class=\"has-icon\">Min Date</label>\n    <span class=\"icon-help tooltipstered\" data-tooltip=\"~ .tooltip-content:first\" data-tooltip-theme=\"info\"></span>\n    <div class=\"tooltip-content\">Only date after can be selected</div>\n    <input type=\"text\" name=\"minDate\" value=${interaction.properties.minDate} />\n</div>\n\n<div class=\"panel\">\n    <label for=\"minDate\" class=\"has-icon\">Max Date</label>\n    <span class=\"icon-help tooltipstered\" data-tooltip=\"~ .tooltip-content:first\" data-tooltip-theme=\"info\"></span>\n    <div class=\"tooltip-content\">Only date before can be selected</div>\n    <input type=\"text\" name=\"maxDate\" value=${interaction.properties.maxDate} />\n</div>\n\n`\n        );\n\n        //init form javascript\n        formElement.initWidget(this.widget.$form);\n\n        //init data change callbacks\n        formElement.setChangeCallbacks($form, interaction, {\n            minDate(i, value) {\n                i.properties.minDate = value;\n            },\n            maxDate(i, value) {\n                i.properties.maxDate = value;\n            },\n        });\n    };\n    return stateQuestion;\n});\n\n\n","define('dateTimePickerInteraction/creator/widget/states/states',[\n    'taoQtiItem/qtiCreator/widgets/states/factory',\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/states/states',\n    'dateTimePickerInteraction/creator/widget/states/Question'\n], function (factory, states, QuestionState) {\n    'use strict';\n    return factory.createBundle(states, [QuestionState], ['answer', 'correct', 'map']);\n});\n\n","define('dateTimePickerInteraction/creator/widget/Widget',[\n    'taoQtiItem/qtiCreator/widgets/interactions/customInteraction/Widget',\n    'dateTimePickerInteraction/creator/widget/states/states',\n], function (Widget, states) {\n    'use strict';\n\n    const DateTimePickerInteractionWidget = Widget.clone();\n\n    DateTimePickerInteractionWidget.initCreator = function () {\n        this.registerStates(states);\n        Widget.initCreator.call(this);\n    };\n\n    return DateTimePickerInteractionWidget;\n});\n\n","define('dateTimePickerInteraction/imsPciCreator',['dateTimePickerInteraction/creator/widget/Widget'], function (Widget) {\n    'use strict';\n\n    const typeIdentifier = 'dateTimePickerInteraction';\n\n    return {\n        /**\n        * (required) Get the typeIdentifier of the custom interaction\n        *\n        * @returns {String}\n        */\n        getTypeIdentifier() {\n            return typeIdentifier;\n        },\n\n        /**\n         * (required) Get the widget prototype\n         * Used in the renderer\n         *\n         * @returns {Object} Widget\n         */\n        getWidget() {\n            return Widget;\n        },\n\n        /**\n         * (optional) Get the default properties values of the pci.\n         * Used on new pci instance creation\n         *\n         * @returns {Object}\n         */\n        getDefaultProperties() {\n            return {\n                minDate: false,\n                maxDate: false\n            };\n        },\n\n        /**\n         * (optional) Callback to execute on the\n         * Used on new pci instance creation\n         *\n         * @returns {Object}\n         */\n        afterCreatedt() {},\n\n        /**\n         * (required) Gives the qti pci markup template\n         *\n         * @returns {function} template function\n         */\n        getMarkupTemplate() {\n            return  () => '<div class=\"date-time-picker-interaction\"></div>';\n        },\n\n        /**\n         * (optional) Allows passing additional data to xml template\n         *\n         * @returns {function} handlebar template\n         */\n        getMarkupData(pci, defaultData) {\n            return defaultData;\n        }\n    };\n});\n\n","define(['dateTimePickerInteraction/imsPciCreator'],function(IMSPCI){return IMSPCI});\n"]}